[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "apiConnection",
        "importPath": "services.apiConnection",
        "description": "services.apiConnection",
        "isExtraImport": true,
        "detail": "services.apiConnection",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "getBronzeData",
        "importPath": "functions.getBronzeData",
        "description": "functions.getBronzeData",
        "isExtraImport": true,
        "detail": "functions.getBronzeData",
        "documentation": {}
    },
    {
        "label": "pyarrow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyarrow",
        "description": "pyarrow",
        "detail": "pyarrow",
        "documentation": {}
    },
    {
        "label": "pyarrow.parquet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyarrow.parquet",
        "description": "pyarrow.parquet",
        "detail": "pyarrow.parquet",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "loadBronzeData",
        "importPath": "functions.loadBronzeData",
        "description": "functions.loadBronzeData",
        "isExtraImport": true,
        "detail": "functions.loadBronzeData",
        "documentation": {}
    },
    {
        "label": "loadSilverData",
        "importPath": "functions.loadSilverData",
        "description": "functions.loadSilverData",
        "isExtraImport": true,
        "detail": "functions.loadSilverData",
        "documentation": {}
    },
    {
        "label": "getBronzeData",
        "kind": 2,
        "importPath": "functions.getBronzeData",
        "description": "functions.getBronzeData",
        "peekOfCode": "def getBronzeData(symbol):\n    with open('data/bronze/' + symbol + '.json') as f:\n        data = json.load(f)\n    df = pd.DataFrame(data['data'])\n    df['date'] = pd.to_datetime(df['date'])\n    df_daily = df.resample('D', on='date').mean()[['low', 'high']]\n    df_daily['low'] = df_daily['low'].fillna(0)\n    df_daily['high'] = df_daily['high'].fillna(0)\n    return df_daily",
        "detail": "functions.getBronzeData",
        "documentation": {}
    },
    {
        "label": "loadBronzeData",
        "kind": 2,
        "importPath": "functions.loadBronzeData",
        "description": "functions.loadBronzeData",
        "peekOfCode": "def loadBronzeData(data):\n    for symbol in data[\"symbols\"]:\n        params = {\n            \"api_token\": data[\"token\"],\n            \"symbols\": symbol,\n            \"date_from\": (datetime.now() - timedelta(days=30)).strftime(\"%Y-%m-%d\"),\n            \"date_to\": datetime.now().strftime(\"%Y-%m-%d\"),\n            \"format\": \"json\"\n        }\n        response = apiConnection(data[\"url\"], params)",
        "detail": "functions.loadBronzeData",
        "documentation": {}
    },
    {
        "label": "loadSilverData",
        "kind": 2,
        "importPath": "functions.loadSilverData",
        "description": "functions.loadSilverData",
        "peekOfCode": "def loadSilverData(data):\n    for symbol in data[\"symbols\"]:\n        bronzeData = getBronzeData(symbol)\n        table = pa.Table.from_pandas(bronzeData)\n        pq.write_table(table, f'data/silver/{symbol}.parquet')",
        "detail": "functions.loadSilverData",
        "documentation": {}
    },
    {
        "label": "apiConnection",
        "kind": 2,
        "importPath": "services.apiConnection",
        "description": "services.apiConnection",
        "peekOfCode": "def apiConnection(url, params):\n    try:\n        response = requests.get(url, params=params)\n        return response.json()\n    except Exception as e:\n        return e",
        "detail": "services.apiConnection",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "token = os.getenv('API_TOKEN')\ndata = {\n    \"token\": token,\n    \"url\": \"https://api.stockdata.org/v1/data/eod\",\n    \"symbols\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\", \"NFLX\", \"NVDA\", \"PYPL\", \"SPOT\", \"SHOP\"],\n}\n# loadBronzeData(data)\nloadSilverData(data)\nfor symbol in data[\"symbols\"]:\n    df = pd.read_parquet('data/silver/AAPL.parquet')",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "data = {\n    \"token\": token,\n    \"url\": \"https://api.stockdata.org/v1/data/eod\",\n    \"symbols\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\", \"NFLX\", \"NVDA\", \"PYPL\", \"SPOT\", \"SHOP\"],\n}\n# loadBronzeData(data)\nloadSilverData(data)\nfor symbol in data[\"symbols\"]:\n    df = pd.read_parquet('data/silver/AAPL.parquet')\n    print()",
        "detail": "index",
        "documentation": {}
    }
]